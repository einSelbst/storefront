import { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'

import Profile from '../components/profile'
import styles from '../styles/Home.module.css'

import { log } from 'logger'
import { CounterButton, NewTabLink } from 'ui'
import { signIn, signOut, useSession } from 'next-auth/react'
import { client } from '../lib/wundergraph'

/* import React from 'react' */
/* import { dehydrate, QueryClient } from '@tanstack/react-query' */
/* import { Layout, Header, InfoBox, PostList } from '../components' */
/* import { fetchPosts } from '../hooks' */

export const getStaticPaths = async () => {
  /* const paths = getAllBrands() */
  const cars = await client.query({ operationName: 'AllAutos' })
  /* brand: allAutos.data.faunaDB_allAutos.data */

  const paths = cars!.data!.faunaDB_allAutos.data.map((car: any) => ({
    params: { brand: car.Make },
  }))

  console.log('777777777777777777777777777777777')
  console.log(paths)
  /* {JSON.stringify(autos.data.faunaDB_allAutos.data[0], null, 2)} */
  /* return { */
  /* paths: [{ params: { id: '1' } }, { params: { id: '2' } }], */
  /* fallback: false, // can also be true or 'blocking' */
  /* } */
  return {
    paths,
    fallback: false,
  }
}


/* export async function getStaticProps ({ */
/* params, */
/* }: GetStaticPropsContext): Promise<GetStaticPropsResult<PostProps>> { */
/* export async function getStaticProps( */
/* context: GetStaticPropsContext */
/* ): Promise<GetStaticPropsResult<PostProps>> { */
/* ){ */
/* const allAutos = await useQuery({ operationName: 'AllAutos' }) */

/* await Promise.resolve('async needs await') */
/* return { */
/* props: { */
/* id: context.params?.id, */
/* paths */
/* brand: allAutos.data.faunaDB_allAutos.data */
/* }, */
/* } */
/* } */
/*
 * export async function getStaticProps3() {
 *   const queryClient = new QueryClient()
 *
 *   await queryClient.prefetchQuery({
 *     queryKey: ['posts', 10],
 *     queryFn: () => fetchPosts(10),
 *   })
 *
 *   return {
 *     props: {
 *       dehydratedState: dehydrate(queryClient),
 *     },
 *   }
 * }
 *  */
export async function getStaticProps() {
  const res = await client.query({
    operationName: 'GetCar',
    input: { carId: '1' }
    /* operationName: 'AllAutos', */
  })
  /* console.log(JSON.stringify(res.error)) */
  /* const car = res */
  const car = res!.data!.faunaDB_Auto

  return {
    props: {
      car,
    },
  }
}

const Brand = ({ car }: any) => {
  /* const Brand = () => { */
  log('Hey! This is Brand.')
  const { data: session } = useSession()
  /* const autos = useQuery({ operationName: 'AllAutos' }) */
  /* const stores = useQuery({ operationName: 'AllStores' }) */
  /* const dragons = useQuery({ operationName: 'Dragons' }) */
  /* const refresh = () => { stores.mutate() } */

  return (
    <div className={styles.container}>
      <Head>
        <title>Store | Kitchen Sink</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{car.Make}</h1>

        {/* <div>{JSON.stringify(dragons.data)}</div> */}

        <ul>
          <li>
            <Link href='/'>Brand</Link>
          </li>
          <li>
            <Link href='/car'>Car</Link>
          </li>
          <li>
            <Link
              href={{
                pathname: '/brand/[brand]',
                query: { brand: 'my-post' },
              }}>
              Blog Post
            </Link>
          </li>
        </ul>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>
        {!session && (
          <>
            Not signed in <br />
            <button
              onClick={() =>
                signIn('zitadel', {
                  callbackUrl: process.env.ZITADEL_CALLBACK_URL!,
                })
              }>
              Sign in
            </button>
          </>
        )}
        {session && (
          <>
            Signed in as {session.user!.email!} <br />
            <button onClick={() => signOut()}>Sign out</button>
          </>
        )}

        <Profile />

        <CounterButton />

        <div className='mx-auto flex max-w-sm flex-col items-center'>
          <p className='mt-3 mb-8 text-center text-black/80'>
            This is the result of your{' '}
            <code className='font-mono font-medium text-amber-500 font-bold'>
              AllStores
            </code>{' '}
            operation.
          </p>
          {/* <code className='p-3'>{JSON.stringify(autos, null, 2)}</code> */}
        </div>

        <p className='description'>
          Built With{' '}
          <NewTabLink href='https://turbo.build/repo'>Turborepo</NewTabLink> +{' '}
          <NewTabLink href='https://nextjs.org/'>Next.js</NewTabLink>
        </p>
      </main>

      <footer className={styles.footer}>
        <a href='https://zitadel.ch' target='_blank' rel='noopener noreferrer'>
          Powered by{' '}
          <span className={styles.logo}>
            <Image
              src='/zitadel-logo-dark.svg'
              alt='Zitadel Logo'
              height={40}
              width={147.5}
            />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Brand
